import asyncio
import json
import logging
from pathlib import Path
import requests
import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, Update
from flask import Flask, request

# ==============================================================================
# 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê
# ==============================================================================
TELEGRAM_BOT_TOKEN = "8000756578:AAGZNAA1YYTqYp_oKTuyw4bCuPswscIATcs"
GEMINI_API_KEY = "AIzaSyDreKAHyvK7JYT6eLGAKR3faMFqtUWzyMc"
MODEL_ID = "gemini-2.5-flash-preview-04-17"
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL_ID}:streamGenerateContent?key={GEMINI_API_KEY}"
CONTEXT_FILE_PATH = Path("/tmp/chat_contexts.json") # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ê–ó–†–ï–®–ï–ù–ù–£–Æ –í–†–ï–ú–ï–ù–ù–£–Æ –ü–ê–ü–ö–£

HELP_MESSAGE_MARKDOWN = """
üåü **–í–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç** üåü
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ì–æ—Å–ø–æ–∂–∞ –§–∞—Ç–∏–º–∞. –Ø –í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ê—Å–∞–¥—É–ª–ª–æ–π –¥–ª—è —Å–ª—É–∂–µ–Ω–∏—è –í–∞–º.
ü§ñ **–ö–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è:**
*   **–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:** –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.
*   **–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö:**
    1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/ega [–≤–∞—à –∑–∞–ø—Ä–æ—Å]`.
    2. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–µ –∏–∑ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.
"""

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = AsyncTeleBot(TELEGRAM_BOT_TOKEN, parse_mode='Markdown')
bot_id = None
chat_contexts = {}

def load_context():
    global chat_contexts
    try:
        CONTEXT_FILE_PATH.parent.mkdir(parents=True, exist_ok=True)
        if CONTEXT_FILE_PATH.exists():
            with open(CONTEXT_FILE_PATH, 'r', encoding='utf-8') as f:
                chat_contexts = json.load(f)
                chat_contexts = {int(k): v for k, v in chat_contexts.items()}
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è {len(chat_contexts)} —á–∞—Ç–æ–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        chat_contexts = {}

def save_context():
    try:
        with open(CONTEXT_FILE_PATH, 'w', encoding='utf-8') as f:
            json.dump(chat_contexts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}")

async def ensure_bot_id():
    global bot_id
    if bot_id is None:
        me = await bot.get_me()
        bot_id = me.id
        logger.info(f"ID –ë–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_id}")

async def process_ai_interaction(message: Message, query: str):
    chat_id = message.chat.id
    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = []
    
    user_display_name = message.from_user.username or message.from_user.first_name
    user_message_for_api = f"{user_display_name}: {query}"
    
    await bot.send_chat_action(chat_id, 'typing')
    
    history = chat_contexts[chat_id][-15:]
    api_payload = {"contents": history + [{"role": "user", "parts": [{"text": user_message_for_api}]}]}

    try:
        response = await asyncio.to_thread(requests.post, GEMINI_API_URL, json=api_payload, timeout=180)
        response.raise_for_status()
        
        full_response_text = ""
        for item in response.json():
            full_response_text += item['candidates'][0]['content']['parts'][0]['text']
        
        ai_response_text = full_response_text.strip()
        
        if ai_response_text:
            chat_contexts[chat_id].append({"role": "user", "parts": [{"text": user_message_for_api}]})
            chat_contexts[chat_id].append({"role": "model", "parts": [{"text": ai_response_text}]})
            save_context()
        else:
            ai_response_text = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ì–æ—Å–ø–æ–∂–∞, –Ω–æ –ò–ò –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò: {e}")
        ai_response_text = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ì–æ—Å–ø–æ–∂–∞, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        
    await bot.reply_to(message, ai_response_text)

@bot.message_handler(commands=['start', 'help'])
async def start_handler(message: Message):
    await bot.reply_to(message, HELP_MESSAGE_MARKDOWN)

@bot.message_handler(commands=['ega'])
async def ega_handler(message: Message):
    query = telebot.util.extract_arguments(message.text)
    if not query:
        await bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ega, –ì–æ—Å–ø–æ–∂–∞.")
        return
    await process_ai_interaction(message, query)

@bot.message_handler(content_types=['text'])
async def text_handler(message: Message):
    await ensure_bot_id()
    is_private = message.chat.type == 'private'
    is_reply = message.reply_to_message and message.reply_to_message.from_user.id == bot_id
    if (is_private or is_reply) and not message.text.startswith('/'):
        await process_ai_interaction(message, message.text.strip())

# ==============================================================================
# 2. –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø WEB SERVICE (FLASK)
# ==============================================================================
app = Flask(__name__)

@app.route(f'/{TELEGRAM_BOT_TOKEN}', methods=['POST'])
def process_webhook():
    json_string = request.get_data().decode('utf-8')
    update = Update.de_json(json_string)
    asyncio.run(bot.process_new_updates([update]))
    return '', 200

@app.route('/')
def index():
    return "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≠–∫–∑–µ–∫—É—Ç–æ—Ä–∞ –í–æ–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω.", 200

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
load_context()
